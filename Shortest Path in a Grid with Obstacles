class Solution {
public:
int shortestPath(vector<vector>& grid, int k) {

    int m=grid.size();
    int n=grid[0].size();
    
    vector<vector<int>>dis(m,vector<int>(n,INT_MAX));
    
    queue<vector<int>>q;
    
    dis[0][0]=grid[0][0];
    
    int level=0;
    
    int dx[]={-1,1,0,0};
    int dy[]={0,0,1,-1};
    
    q.push({0,0});
    
    while(!q.empty()){
        
        int sz=q.size();
        
        while(sz--){
            
            vector<int>vec=q.front();
            q.pop();
            
            if(vec[0]==m-1 && vec[1]==n-1){
                return level;
            }
           
            for(int i=0;i<4;i++){

                int x=dx[i]+vec[0];
                int y=dy[i]+vec[1];
                
                if(x>=0 && x<m && y>=0 && y<n && dis[vec[0]][vec[1]]+grid[x][y]<=k && dis[vec[0]][vec[1]]+grid[x][y]<dis[x][y] ){
                    
                    dis[x][y]=dis[vec[0]][vec[1]]+grid[x][y];
                    q.push({x,y});
                }
                
            }
            
        }
        
        level++;
    }
    
    return -1;
}
};

